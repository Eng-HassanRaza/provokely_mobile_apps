name: iOS IPA (Ad Hoc signed)

on:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    env:
      # Prefer setting this as a repo/org Secret or Variable with trailing slash
      API_BASE_URL: ${{ secrets.API_BASE_URL || 'https://provokely.com/' }}
      ENABLE_FCM: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Ensure iOS platform exists (keep committed Podfile)
        run: |
          if [ ! -f ios/Runner.xcodeproj/project.pbxproj ]; then
            flutter create --platforms=ios .
          fi
          ls -la ios || true

      - name: Flutter pub get
        run: flutter pub get

      - name: Ensure iOS 13.0 deployment target in Podfile
        run: |
          /usr/bin/sed -i '' "s/^platform :ios, .*/platform :ios, '13.0'/" ios/Podfile || true

      - name: CocoaPods install
        run: |
          cd ios
          pod repo update
          pod install --repo-update --verbose

      - name: Configure deep links
        run: bash scripts/config_platforms.sh || true

      - name: Echo build defines
        run: |
          echo "API_BASE_URL=${API_BASE_URL}"
          echo "ENABLE_FCM=${ENABLE_FCM}"

      - name: Install signing assets
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          # Decode files safely using Python to avoid echo issues
          python3 -c "
import base64, os
with open('signing.p12', 'wb') as f:
    f.write(base64.b64decode(os.environ['P12_BASE64']))
with open('profile.mobileprovision', 'wb') as f:
    f.write(base64.b64decode(os.environ['PROVISIONING_PROFILE_BASE64']))
"
          
          # Verify the P12 before importing
          openssl pkcs12 -info -in signing.p12 -noout -passin pass:"$P12_PASSWORD" || (echo "Bad P12/password" && exit 1)
          
          security create-keychain -p '' build.keychain
          security import signing.p12 -k build.keychain -P "$P12_PASSWORD" -A -f pkcs12
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p '' build.keychain
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$(/usr/bin/security cms -D -i profile.mobileprovision)")
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          echo "PROFILE_UUID=$UUID" >> $GITHUB_ENV

      - name: Create export options (Ad Hoc)
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>ad-hoc</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>provisioningProfiles</key><dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_UUID}</string>
            </dict>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
          </dict></plist>
          EOF

      - name: Archive (signed) with xcodebuild
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
          API_BASE_URL: ${{ secrets.API_BASE_URL || 'https://provokely.com/' }}
          ENABLE_FCM: false
        run: |
          flutter build ios --release \
            --dart-define=API_BASE_URL=${API_BASE_URL} \
            --dart-define=ENABLE_FCM=${ENABLE_FCM}

          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner -configuration Release \
            -archivePath build/Runner.xcarchive \
            -destination 'generic/platform=iOS' -sdk iphoneos \
            PRODUCT_BUNDLE_IDENTIFIER=${BUNDLE_ID} \
            CODE_SIGN_STYLE=Manual DEVELOPMENT_TEAM=${TEAM_ID} \
            PROVISIONING_PROFILE_SPECIFIER=${PROFILE_UUID} clean archive | xcpretty

      - name: Export signed IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/ios/signed \
            -exportOptionsPlist exportOptions.plist | xcpretty
          ls -la build/ios/signed || true

      - name: Upload signed IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-signed
          path: build/ios/signed/*.ipa


